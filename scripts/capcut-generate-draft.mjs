import fs from "fs";
import path from "path";
import { homedir } from "os";
import { fileURLToPath } from "url";
import { callApi } from "../lib/api-client.mjs";
import { startFileServer } from "../lib/file-server.mjs";
import {
  addAudioTrack,
  addBackgroundLayer,
  addImageScenes,
  addRandomEffects,
  addFixedEffects,
  addLogo,
  addTextLogo,
} from "../lib/capcut-elements.mjs";

/**
 * L·ªõp qu·∫£n l√Ω vi·ªác t·∫°o video CapCut.
 */
class CapCutGenerator {
  constructor(episodeDir, ratio = "9:16") {
    this.episodeDir = episodeDir;
    this.ratio = ratio;
    this.fileServer = null;
    this.draftId = null;
    this.scriptData = null;
    this.totalAudioDuration = 0;
    this.width = 0;
    this.height = 0;
    this.baseServeDir = path.resolve(episodeDir, "..", "..");
  }
  
  /**
   * Kh·ªüi t·∫°o v√† ki·ªÉm tra c√°c file c·∫ßn thi·∫øt.
   */
  async init() {
    if (!fs.existsSync(this.episodeDir)) {
      throw new Error(`‚ùå Th∆∞ m·ª•c episode kh√¥ng t·ªìn t·∫°i: ${this.episodeDir}`);
    }

    const scriptJsonPath = path.join(this.episodeDir, "capcut-api.json");
    this.audioPath = path.join(this.episodeDir, "audio.mp3");

    if (!fs.existsSync(scriptJsonPath)) {
      throw new Error(
        `‚ùå Kh√¥ng t√¨m th·∫•y file capcut-api.json trong: ${this.episodeDir}`
      );
    }
    if (!fs.existsSync(this.audioPath)) {
      throw new Error(
        `‚ùå Kh√¥ng t√¨m th·∫•y file audio.mp3 trong: ${this.episodeDir}`
      );
    }

    this.scriptData = JSON.parse(fs.readFileSync(scriptJsonPath, "utf8"));
    this.totalAudioDuration =
      Math.round(this.scriptData.duration * 1000) / 1000;

    const dimensions = {
      "9:16": { width: 1080, height: 1920 },
      "16:9": { width: 1920, height: 1080 },
    };
    const { width, height } = dimensions[this.ratio] || dimensions["16:9"];
    this.width = width;
    this.height = height;
  }
  
  /**
   * Ch·∫°y to√†n b·ªô pipeline t·∫°o video.
   */
  async run() {
    try {
      await this.init();
      this.fileServer = await startFileServer(this.baseServeDir);

      console.log( 
        `üé¨ Creating draft with ratio ${this.ratio} (${this.width}x${this.height})`
      );

      // --- B∆Ø·ªöC 1: T·∫†O DRAFT ---
      const createDraftResponse = await callApi("/create_draft", {
        width: this.width,
        height: this.height,
      });
      this.draftId = createDraftResponse?.output?.draft_id;
      console.log(`üéâ Draft ƒë√£ ƒë∆∞·ª£c t·∫°o v·ªõi ID: ${this.draftId}`);
      
      // --- B∆Ø·ªöC 2: TH√äM AUDIO ---
      // Audio l√† th√†nh ph·∫ßn c·ªët l√µi, lu√¥n ƒë∆∞·ª£c th√™m v√†o
      await addAudioTrack(this.draftId, this.audioPath, this.baseServeDir);

      const enabledModules =
        this.scriptData.generation_params?.enabled_modules || [];

      const runIfEnabled = async (moduleName, action, ...args) => {
        if (enabledModules.includes(moduleName)) {
          console.log(`‚úÖ Module '${moduleName}' is enabled. Running...`);
          await action(...args);
        } else {
          console.log(
            `‚è© Skipping module '${moduleName}': Not found in 'enabled_modules'.`
          );
        }
      };

      // --- B∆Ø·ªöC 3: TH√äM C√ÅC L·ªöP H√åNH ·∫¢NH ---
      await runIfEnabled(
        "background_layer",
        addBackgroundLayer,
        this.draftId,
        this.scriptData,
        this.totalAudioDuration,
        this.baseServeDir
      );

      await runIfEnabled(
        "scene_images",
        addImageScenes,
        this.draftId,
        this.scriptData,
        this.totalAudioDuration,
        this.baseServeDir
      );
      
      // --- B∆Ø·ªöC 4: TH√äM LOGO & TEXT ---
      await runIfEnabled(
        "logo",
        addLogo,
        this.draftId,
        this.scriptData,
        this.totalAudioDuration,
        this.baseServeDir
      );

      await runIfEnabled(
        "text_logo",
        addTextLogo,
        this.draftId,
        this.scriptData,
        this.totalAudioDuration
      );
      
      // --- B∆Ø·ªöC 5: TH√äM EFFECTS ---
      await runIfEnabled(
        "fixed_effects",
        addFixedEffects,
        this.draftId,
        this.scriptData,
        this.totalAudioDuration,
        this.width,
        this.height
      );
      
      await runIfEnabled(
        "random_effects",
        addRandomEffects,
        this.draftId,
        this.totalAudioDuration,
        this.width,
        this.height
      );
      
      // --- B∆Ø·ªöC 6: L∆ØU DRAFT ---
      await this.saveDraft();
      
      console.log("\n\n‚ú®‚ú®‚ú® PIPELINE HO√ÄN T·∫§T! ‚ú®‚ú®‚ú®");
    } catch (error) {
      console.error("\nüí•üí•üí• PIPELINE TH·∫§T B·∫†I! üí•üí•üí•");
      console.error("ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh th·ª±c thi:", error.message);
    } finally {
      if (this.fileServer) {
        this.fileServer.close(() => {
          console.log("üîå Local file server stopped.");
        });
      }
    }
  }
  
  /**
   * L∆∞u draft v√†o th∆∞ m·ª•c c·ªßa CapCut.
   */
  async saveDraft() {
    const savePayload = {
      draft_id: this.draftId,
      draft_folder: path.join(
        homedir(),
        "AppData",
        "Local",
        "CapCut",
        "User Data",
        "Projects",
        "com.lveditor.draft"
      ),
    };

    const saveResponse = await callApi("/save_draft", savePayload);
    const finalDraftPath = path.join(savePayload.draft_folder, this.draftId);
    const folderUrl = `file://${finalDraftPath.replace(/\\/g, "/")}`;
    console.log(`‚úÖ Draft ƒë√£ ƒë∆∞·ª£c l∆∞u. M·ªü th∆∞ m·ª•c: ${folderUrl}`);

    const draftUrl = saveResponse?.output?.draft_url;
    console.log("Draft URL (n·∫øu c√≥):", draftUrl);
  }
}

// --- C√ÅCH S·ª¨ D·ª§NG ---
// L·∫•y ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c episode t·ª´ tham s·ªë d√≤ng l·ªánh
// V√≠ d·ª•: node scripts/capcut-generate-draft.mjs episodes/11.la-rung-vo-thuong --ratio 16:9
async function main() {
  const args = process.argv.slice(2);
  const targetEpisodeDir = args.find((arg) => !arg.startsWith("--"));
  const ratioArg = args.find((arg) => arg.startsWith("--ratio="));
  const ratio = ratioArg ? ratioArg.split("=")[1] : "9:16";

  if (!targetEpisodeDir) {
    const scriptName = path.basename(fileURLToPath(import.meta.url));
    console.error("‚ùå Vui l√≤ng cung c·∫•p ƒë∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c episode.");
    console.error(
      `V√≠ d·ª•: node scripts/${scriptName} episodes/11.la-rung-vo-thuong`
    );
    console.error(`T√πy ch·ªçn: --ratio=16:9 (m·∫∑c ƒë·ªãnh l√† 9:16)`);
    process.exit(1);
  }

  if (ratio !== "9:16" && ratio !== "16:9") {
    console.error(
      `‚ùå T·ªâ l·ªá kh√¥ng h·ª£p l·ªá: ${ratio}. Ch·ªâ h·ªó tr·ª£ '9:16' ho·∫∑c '16:9'.`
    );
    process.exit(1);
  }

  const generator = new CapCutGenerator(path.resolve(targetEpisodeDir), ratio);
  await generator.run();
}

main();
