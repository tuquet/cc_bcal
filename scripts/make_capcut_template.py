#!/usr/bin/env python3
import argparse
import json
import re
import subprocess
import os
import sys
import threading
import time
from http.server import SimpleHTTPRequestHandler
import shutil
from pathlib import Path
from typing import Any, Dict, Optional

import requests

# --- T√≠ch h·ª£p Script Manager ---
PROJECT_ROOT = Path(__file__).resolve().parent.parent
sys.path.append(str(PROJECT_ROOT))

# --- C·∫•u h√¨nh ---
# Port cho API c·ªßa CapCut. Script g·ªëc d√πng 9001, b·∫°n c√≥ th·ªÉ thay ƒë·ªïi n·∫øu c·∫ßn.
CAPCUT_API_PORT = 9001
CAPCUT_API_BASE_URL = f"http://127.0.0.1:{CAPCUT_API_PORT}"

# Port cho server file c·ª•c b·ªô. Script g·ªëc d√πng 9002.
FILE_SERVER_PORT = 9002
FILE_SERVER_BASE_URL = f"http://127.0.0.1:{FILE_SERVER_PORT}"
from socketserver import TCPServer


class FileServerThread(threading.Thread):
    """Ch·∫°y m·ªôt HTTP server ƒë∆°n gi·∫£n trong m·ªôt thread ri√™ng bi·ªát."""

    def __init__(self, directory: Path, port: int):
        super().__init__()
        self.directory = directory
        self.port = port
        self.server: Optional[TCPServer] = None
        self.daemon = True  # Thread s·∫Ω t·ª± tho√°t khi ch∆∞∆°ng tr√¨nh ch√≠nh k·∫øt th√∫c

    def run(self):
        # Thay ƒë·ªïi th∆∞ m·ª•c l√†m vi·ªác ƒë·ªÉ server ph·ª•c v·ª• ƒë√∫ng file
        os.chdir(self.directory)
        handler = SimpleHTTPRequestHandler
        self.server = TCPServer(("", self.port), handler)
        print(f"üîå Local file server started at {FILE_SERVER_BASE_URL}")
        print(f"   Serving files from: {self.directory.resolve()}")
        self.server.serve_forever()

    def stop(self):
        if self.server:
            self.server.shutdown()
            self.server.server_close()
            print("üîå Local file server stopped.")


def call_api(endpoint: str, payload: Dict[str, Any]) -> Dict[str, Any]:
    """G·ª≠i request ƒë·∫øn CapCut API v√† tr·∫£ v·ªÅ k·∫øt qu·∫£."""
    url = f"{CAPCUT_API_BASE_URL}{endpoint}"
    print(f"üìû Calling API: {endpoint}...")
    try:
        response = requests.post(url, json=payload, timeout=30)
        response.raise_for_status()  # N√©m l·ªói n·∫øu status code l√† 4xx ho·∫∑c 5xx
        result = response.json()
        # The API uses a 'success' boolean field, not a 'code' field.
        if not result.get("success"):
            error_message = result.get('message') or result.get('error', 'Unknown API error')
            raise Exception(f"API Error: {error_message}. Full response: {result}")
        return result
    except requests.exceptions.RequestException as e:
        raise ConnectionError(f"Failed to connect to CapCut API at {url}. Is CapCut running? Error: {e}") from e


class CapCutGenerator:
    """L·ªõp qu·∫£n l√Ω vi·ªác t·∫°o video CapCut, t∆∞∆°ng ƒë∆∞∆°ng v·ªõi script Node.js."""

    def __init__(self, project_folder: Path, script_data: Dict[str, Any], ratio: str = "9:16"):
        self.episode_dir = project_folder.resolve()
        self.ratio = ratio
        self.file_server: Optional[FileServerThread] = None
        self.draft_id: Optional[str] = None
        self.script_data: Dict[str, Any] = script_data
    # store total audio duration in seconds (server API expects seconds)
        self.total_audio_duration_s = 0.0
        self.width = 0
        self.height = 0
        # Server s·∫Ω ph·ª•c v·ª• file t·ª´ th∆∞ m·ª•c g·ªëc c·ªßa d·ª± √°n
        self.base_serve_dir = self.episode_dir.parent.parent

    def _get_http_path(self, file_path: Path) -> str:
        """Chuy·ªÉn ƒë·ªïi ƒë∆∞·ªùng d·∫´n file c·ª•c b·ªô th√†nh URL HTTP."""
        # ƒê·∫£m b·∫£o file_path l√† absolute tr∆∞·ªõc khi t√≠nh relative
        abs_file_path = file_path if file_path.is_absolute() else self.base_serve_dir / file_path
        relative_path = abs_file_path.resolve().relative_to(self.base_serve_dir)
        return f"{FILE_SERVER_BASE_URL}/{relative_path.as_posix()}"

    def init(self):
        """Kh·ªüi t·∫°o v√† ki·ªÉm tra c√°c file c·∫ßn thi·∫øt."""
        if not self.episode_dir.is_dir():
            raise FileNotFoundError(f"‚ùå Th∆∞ m·ª•c episode kh√¥ng t·ªìn t·∫°i: {self.episode_dir}")

        # T√¨m file audio linh ho·∫°t h∆°n
        audio_candidates = list(self.episode_dir.glob('audio.*'))
        if not audio_candidates:
             raise FileNotFoundError(f"‚ùå Kh√¥ng t√¨m th·∫•y file audio (audio.mp3, audio.wav, etc.) trong: {self.episode_dir}")
        self.audio_path = audio_candidates[0]
        if not self.audio_path.exists():
            raise FileNotFoundError(f"‚ùå Kh√¥ng t√¨m th·∫•y file audio t·∫°i: {self.audio_path}")

        # Prefer the actual audio file duration (probe) so visuals match audio exactly.
        probed = self._probe_audio_duration(self.audio_path)
        if probed:
            self.total_audio_duration_s = float(probed)
        else:
            # Fallback to capcut-api.json duration if probing fails
            duration_sec = float(self.script_data.get("duration", 0) or 0)
            self.total_audio_duration_s = float(duration_sec)

        dimensions = {
            "9:16": {"width": 1080, "height": 1920},
            "16:9": {"width": 1920, "height": 1080},
        }
        self.width, self.height = dimensions.get(self.ratio, dimensions["16:9"]).values()

        # --- H·ª£p nh·∫•t video-template.json ---
        # ƒê∆∞·ªùng d·∫´n ch√≠nh x√°c ƒë·∫øn file template, d·ª±a tr√™n PROJECT_ROOT
        template_path = PROJECT_ROOT / 'static' / 'video-template.json'
        if template_path.exists():
            print(f"üîé T√¨m th·∫•y video-template.json t·∫°i: {template_path}")
            with open(template_path, 'r', encoding='utf-8') as f:
                template_data = json.load(f)
            
            # H·ª£p nh·∫•t 'builder_configs'
            # D·ªØ li·ªáu trong script_data s·∫Ω ghi ƒë√® l√™n template n·∫øu c√≥ xung ƒë·ªôt
            # S·ª≠ d·ª•ng deep merge ƒë·ªÉ h·ª£p nh·∫•t c√°c dictionary con
            merged_params = self._deep_merge(template_data, self.script_data.get("builder_configs", {}))
            self.script_data["builder_configs"] = merged_params
        else:
            print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file video-template.json t·∫°i: {template_path}")

    def _probe_audio_duration(self, audio_path: Path) -> Optional[float]:
        """Try multiple methods to get duration (seconds) of audio file.
        Returns float seconds or None.
        """
        # 1) Try imageio_ffmpeg.get_ffprobe_exe()
        try:
            import imageio_ffmpeg
            get_ffprobe = getattr(imageio_ffmpeg, 'get_ffprobe_exe', None)
            if callable(get_ffprobe):
                ffprobe = get_ffprobe()
                if ffprobe:
                    out = subprocess.check_output([ffprobe, '-v', 'error', '-show_entries', 'format=duration', '-of', 'default=noprint_wrappers=1:nokey=1', str(audio_path)], text=True)
                    return float(out.strip())
        except Exception:
            pass

        # 2) Try system ffprobe
        sys_ffprobe = shutil.which('ffprobe')
        if sys_ffprobe:
            try:
                out = subprocess.check_output([sys_ffprobe, '-v', 'error', '-show_entries', 'format=duration', '-of', 'default=noprint_wrappers=1:nokey=1', str(audio_path)], text=True)
                return float(out.strip())
            except Exception:
                pass

        # 3) Try ffmpeg stderr parsing via imageio_ffmpeg.get_ffmpeg_exe()
        try:
            import imageio_ffmpeg
            get_ffmpeg = getattr(imageio_ffmpeg, 'get_ffmpeg_exe', None)
            if callable(get_ffmpeg):
                ffmpeg = get_ffmpeg()
                if ffmpeg:
                    proc = subprocess.run([ffmpeg, '-i', str(audio_path)], capture_output=True, text=True)
                    stderr = proc.stderr or ''
                    m = re.search(r'Duration: (\d+):(\d+):(\d+\.\d+)', stderr)
                    if m:
                        h, mm, ss = m.groups()
                        return int(h) * 3600 + int(mm) * 60 + float(ss)
        except Exception:
            pass

        # 4) Try system ffmpeg
        sys_ffmpeg = shutil.which('ffmpeg')
        if sys_ffmpeg:
            try:
                proc = subprocess.run([sys_ffmpeg, '-i', str(audio_path)], capture_output=True, text=True)
                stderr = proc.stderr or ''
                m = re.search(r'Duration: (\d+):(\d+):(\d+\.\d+)', stderr)
                if m:
                    h, mm, ss = m.groups()
                    return int(h) * 3600 + int(mm) * 60 + float(ss)
            except Exception:
                pass

        return None

    def _deep_merge(self, base: dict, new: dict) -> dict:
        """H·ª£p nh·∫•t hai dictionary m·ªôt c√°ch ƒë·ªá quy."""
        merged = base.copy()
        for key, value in new.items():
            if isinstance(value, dict) and key in merged and isinstance(merged[key], dict):
                merged[key] = self._deep_merge(merged[key], value)
            else:
                merged[key] = value
        return merged

    def _run_if_enabled(self, module_name: str, action, *args, **kwargs):
        """Helper ƒë·ªÉ ch·∫°y m·ªôt action n·∫øu module ƒë∆∞·ª£c b·∫≠t."""
        enabled_modules = self.script_data.get("builder_configs", {}).get("enabled_modules", [])
        if module_name in enabled_modules:
            action(*args, **kwargs)
        else:
            print(f"‚è© Skipping module '{module_name}'")

    def run(self):
        """Ch·∫°y to√†n b·ªô pipeline t·∫°o video."""
        try:
            self.init()
            self.file_server = FileServerThread(self.base_serve_dir, FILE_SERVER_PORT)
            self.file_server.start()
            # ƒê·ª£i server kh·ªüi ƒë·ªông
            time.sleep(1)

            print(f"üé¨ Creating draft with ratio {self.ratio} ({self.width}x{self.height})")

            # --- B∆Ø·ªöC 1: T·∫†O DRAFT ---
            create_draft_response = call_api("/create_draft", {"width": self.width, "height": self.height})
            self.draft_id = create_draft_response.get("output", {}).get("draft_id")
            if not self.draft_id:
                raise ValueError("Kh√¥ng l·∫•y ƒë∆∞·ª£c draft_id t·ª´ API")
            print(f"üéâ Draft ƒë√£ ƒë∆∞·ª£c t·∫°o v·ªõi ID: {self.draft_id}")

            # --- B∆Ø·ªöC 2: TH√äM AUDIO (lu√¥n ch·∫°y) ---
            print("‚úÖ Module 'audio' is enabled. Running...")
            self.add_audio_track()

            # --- B∆Ø·ªöC 3: TH√äM C√ÅC L·ªöP H√åNH ·∫¢NH ---
            self._run_if_enabled("background_layer", self.add_background_layer)
            self._run_if_enabled("scene_images", self.add_image_scenes)

            # --- B∆Ø·ªöC 4: TH√äM LOGO & TEXT ---
            self._run_if_enabled("logo", self.add_logo)
            self._run_if_enabled("text_logo", self.add_text_logo)

            # --- B∆Ø·ªöC 5: TH√äM EFFECTS ---
            self._run_if_enabled("fixed_effects", self.add_fixed_effects)
            self._run_if_enabled("random_effects", self.add_random_effects)

            # --- B∆Ø·ªöC 6: L∆ØU DRAFT ---
            self.save_draft()

            print("\n\n‚ú®‚ú®‚ú® PIPELINE HO√ÄN T·∫§T! ‚ú®‚ú®‚ú®")

        except Exception as e:
            print("\nüí•üí•üí• PIPELINE TH·∫§T B·∫†I! üí•üí•üí•", file=sys.stderr)
            print(f"ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh th·ª±c thi: {e}", file=sys.stderr)
        finally:
            if self.file_server:
                self.file_server.stop()

    # --- C√°c h√†m th√™m element, t√°i t·∫°o logic t·ª´ capcut-elements.mjs ---

    def add_audio_track(self):
        # Ensure the audio element duration matches the total audio duration determined from capcut-api.json
        payload = {
            "draft_id": self.draft_id,
            "audio_url": self._get_http_path(self.audio_path),
            "start": 0,
        }
        # Some CapCut API variants expect an explicit 'end' or 'duration' field ‚Äî include both to be safe
        if getattr(self, 'total_audio_duration_s', None):
            payload["end"] = float(self.total_audio_duration_s)
            payload["duration"] = float(self.total_audio_duration_s)

        call_api("/add_audio", payload)

    def add_background_layer(self):
        params = self.script_data.get("builder_configs", {}).get("background_layer", {})
        # derive scenes from acts only; do not support top-level 'scenes'
        acts = self.script_data.get("acts") or []
        scenes = []
        for act in acts:
            scenes.extend(act.get("scenes") or [])
        if not scenes or not scenes[0].get("image"):
            print("‚è© Skipping background layer: No scenes or first scene has no image.")
            return

        background_image_path = Path(scenes[0]["image"])
        call_api("/add_video", {
            "draft_id": self.draft_id,
            "video_url": self._get_http_path(background_image_path),
            "start": 0,
            "end": self.total_audio_duration_s,
            "track_name": "background_track",
            "relative_index": -1, # ƒê·∫∑t ·ªü l·ªõp d∆∞·ªõi c√πng
            "scale_x": params.get("scale", 2.5),
            "scale_y": params.get("scale", 2.5),
            "background_blur": params.get("blur", 3),
        })

    def add_image_scenes(self):
        params = self.script_data.get("builder_configs", {}).get("scene_images", {})
        # derive scenes from acts only
        acts = self.script_data.get("acts") or []
        scenes = []
        for act in acts:
            scenes.extend(act.get("scenes") or [])
        
        # Logic "stretch" th·ªùi gian gi·ªëng h·ªát script Node.js
        valid_scenes = [s for s in scenes if s.get("start") is not None and s.get("end") is not None]
        total_visual_duration_s = sum(s["end"] - s["start"] for s in valid_scenes)

        # stretch_factor: ratio between audio total duration (seconds) and visual total duration (seconds)
        stretch_factor = (self.total_audio_duration_s) / total_visual_duration_s if total_visual_duration_s > 0 else 1

        current_time_s = 0.0
        for i, scene in enumerate(scenes):
            if scene.get("start") is None or scene.get("end") is None or not scene.get("image"):
                print(f"‚ö†Ô∏è Skipping scene {i + 1}: Missing time or image information.")
                continue

            original_duration_s = scene["end"] - scene["start"]
            new_duration_s = original_duration_s * stretch_factor

            call_api("/add_image", {
                "draft_id": self.draft_id,
                "image_url": self._get_http_path(Path(scene["image"])),
                # API expects seconds for start/end
                "start": current_time_s,
                "end": current_time_s + new_duration_s,
                "track_name": "main_track",
                "relative_index": 9, # ƒê·∫∑t tr√™n l·ªõp background
                "scale_x": params.get("scale", 1.2),
                "scale_y": params.get("scale", 1.2),
            })
            current_time_s += new_duration_s

    def add_logo(self):
        params = self.script_data.get("builder_configs", {}).get("logo", {})
        logo_path = params.get("path")
        if not logo_path or not Path(logo_path).is_file():
            print(f"‚ö†Ô∏è Logo file not found, skipping: {logo_path}")
            return

        call_api("/add_image", {
            "draft_id": self.draft_id,
            "image_url": self._get_http_path(Path(logo_path)),
            "start": 0,
            "end": self.total_audio_duration_s,
            "track_name": "logo_track",
            "relative_index": 20, # ƒê·∫∑t ·ªü l·ªõp tr√™n c√πng
            "scale_x": params.get("scale", 0.1),
            "scale_y": params.get("scale", 0.1),
            "transform_x": params.get("transform_x", 0.9),
            "transform_y": params.get("transform_y", -0.5),
        })

    def add_text_logo(self):
        params = self.script_data.get("builder_configs", {}).get("text_logo", {})
        if not params.get("text"):
            print("‚è© Skipping text logo: 'text' property is missing.")
            return

        call_api("/add_text", {
            "type": "text",
            "draft_id": self.draft_id,
            "track_name": "text_logo_track",
            "text": params["text"],
            "start": params.get("start", 0),
            "end": params.get("end", self.total_audio_duration_s),
            "font_size": params.get("font_size", 12),
            "font_color": params.get("font_color", "#FFFFFF"),
            "font_alpha": params.get("font_alpha", 0.6),
            "transform_x": params.get("transform_x", 0),
            "transform_y": params.get("transform_y", 0),
        })

    def add_fixed_effects(self):
        effects = self.script_data.get("builder_configs", {}).get("fixed_effects", {}).get("effects", [])
        for effect in effects:
            if not effect.get("effect_type"):
                continue
            call_api("/add_effect", {
                "draft_id": self.draft_id,
                "type": "effect",
                "effect_type": effect["effect_type"],
                "start": 0,
                "end": self.total_audio_duration_s,
                "track_name": effect.get("track_name", "fixed_effect"),
                "relative_index": 1, # ƒê·∫∑t tr√™n l·ªõp n·ªÅn
                "params": effect.get("params", []),
                "width": self.width,
                "height": self.height,
            })

    def add_random_effects(self):
        # Logic n√†y c·∫ßn ƒë∆∞·ª£c l√†m r√µ h∆°n t·ª´ API c·ªßa CapCut
        # T·∫°m th·ªùi b·ªè qua v√¨ kh√¥ng c√≥ ƒë·ªß th√¥ng tin trong script g·ªëc
        print("‚è© Skipping module 'random_effects': Logic not implemented.")

    def save_draft(self):
        """L∆∞u draft v√†o th∆∞ m·ª•c c·ªßa CapCut."""
        # API /save_draft s·∫Ω t·∫°o m·ªôt th∆∞ m·ª•c draft trong th∆∞ m·ª•c l√†m vi·ªác hi·ªán t·∫°i c·ªßa server.
        # Ch√∫ng ta c·∫ßn di chuy·ªÉn n√≥ v√†o th∆∞ m·ª•c project c·ªßa CapCut.
        
        # 1. X√°c ƒë·ªãnh ƒë∆∞·ªùng d·∫´n ƒë√≠ch c·ªßa CapCut
        capcut_projects_dir = Path.home() / "AppData/Local/CapCut/User Data/Projects/com.lveditor.draft"
        if not capcut_projects_dir.exists():
            print(f"‚ö†Ô∏è  C·∫£nh b√°o: Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c project c·ªßa CapCut t·∫°i: {capcut_projects_dir}")
            print("   Vui l√≤ng ki·ªÉm tra l·∫°i ƒë∆∞·ªùng d·∫´n n·∫øu b·∫°n c√†i CapCut ·ªü v·ªã tr√≠ kh√°c.")
            # V·∫´n ti·∫øp t·ª•c ƒë·ªÉ l∆∞u v√†o th∆∞ m·ª•c hi·ªán t·∫°i
            capcut_projects_dir.mkdir(parents=True, exist_ok=True)

        save_payload = {
            "draft_id": self.draft_id,
            # Tham s·ªë n√†y ch·ªâ ƒë·ªãnh n∆°i server l∆∞u tr·ªØ c√°c file media, kh√¥ng ph·∫£i n∆°i l∆∞u draft cu·ªëi c√πng.
            "draft_folder": str(capcut_projects_dir.resolve()),
        }

        print(f"üí° ƒêang g·ª≠i payload t·ªõi /save_draft v·ªõi draft_folder: {capcut_projects_dir}")

        save_response = call_api("/save_draft", save_payload)

        # Ph·∫£n h·ªìi t·ª´ API c√≥ c·∫•u tr√∫c l·ªìng nhau: {"output": {"draft_url": "..."}}
        draft_path_str = save_response.get("output", {}).get("draft_url")
        if draft_path_str:
            # draft_url l√† ƒë∆∞·ªùng d·∫´n file m√† CapCut tr·∫£ v·ªÅ.
            print(f"‚úÖ Draft ƒë√£ ƒë∆∞·ª£c l∆∞u b·ªüi CapCut t·∫°i: {draft_path_str}")
        else:
            print(f"‚ö†Ô∏è Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ƒë∆∞·ªùng d·∫´n draft t·ª´ API. Ph·∫£n h·ªìi: {save_response}")


def main():
    parser = argparse.ArgumentParser(description="T·∫°o video nh√°p CapCut t·ª´ m·ªôt th∆∞ m·ª•c project.")
    parser.add_argument("project_folder", type=Path, help="ƒê∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c project ch·ª©a capcut-api.json v√† c√°c t√†i s·∫£n.")
    parser.add_argument("--ratio", type=str, default="9:16", choices=["9:16", "16:9"], help="Video aspect ratio (default: 9:16).")

    args = parser.parse_args()

    if not args.project_folder.is_dir():
        print(f"‚ùå L·ªói: Th∆∞ m·ª•c project kh√¥ng t·ªìn t·∫°i: {args.project_folder}", file=sys.stderr)
        sys.exit(1)

    generator = CapCutGenerator(args.project_folder, ratio=args.ratio)
    generator.run()


if __name__ == "__main__":
    # This allows the script to be run standalone, but also imported from other modules.
    main()
