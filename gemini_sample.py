import time
import subprocess
# import atexit # T·∫°m th·ªùi v√¥ hi·ªáu h√≥a ƒë·ªÉ kh√¥ng t·ª± ƒë·ªông ƒë√≥ng tr√¨nh duy·ªát
from selenium import webdriver
from selenium.webdriver.common.by import By
from pathlib import Path
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException

# --- Constants for CSS Selectors for easier maintenance ---
INPUT_BOX_SELECTOR = "div.ql-editor.ql-blank"
SEND_BUTTON_SELECTOR = "button.send-button"
MARKDOWN_RESPONSE_SELECTOR = ".markdown"

# Global variable to hold the chrome process so we can terminate it later
chrome_process = None

# def cleanup_chrome_process():
#     """Ensures the Chrome process is terminated when the script exits."""
#     global chrome_process
#     if chrome_process:
#         print("\nüßπ D·ªçn d·∫πp: ƒêang ƒë√≥ng ti·∫øn tr√¨nh Chrome...")
#         chrome_process.terminate()
#         chrome_process.wait()
#         print("‚úÖ Ti·∫øn tr√¨nh Chrome ƒë√£ ƒë∆∞·ª£c ƒë√≥ng.")

# Register the cleanup function to be called automatically on script exit
# atexit.register(cleanup_chrome_process)

def automate_gemini(prompt: str):
    """
    S·ª≠ d·ª•ng Selenium ƒë·ªÉ t·ª± ƒë·ªông m·ªü Gemini, g·ª≠i m·ªôt prompt v√† l·∫•y k·∫øt qu·∫£.
    """
    global chrome_process

    # --- B∆∞·ªõc 1: T·ª± ƒë·ªông kh·ªüi ƒë·ªông Chrome ·ªü ch·∫ø ƒë·ªô debug ---
    chrome_exe_path = r"C:\Program Files\Google\Chrome\Application\chrome.exe"
    user_data_dir = Path.cwd() / "chrome-profile"  # D√πng profile c·ª•c b·ªô trong th∆∞ m·ª•c d·ª± √°n
    debugging_port = 9222
    chrome_command = [chrome_exe_path, f"--remote-debugging-port={debugging_port}", f'--user-data-dir={user_data_dir}']
    
    print(f"üöÄ ƒêang kh·ªüi ƒë·ªông Chrome ·ªü ch·∫ø ƒë·ªô debug tr√™n port {debugging_port}...")
    chrome_process = subprocess.Popen(chrome_command)
    time.sleep(5)  # ƒê·ª£i v√†i gi√¢y ƒë·ªÉ Chrome kh·ªüi ƒë·ªông ho√†n to√†n

    # --- B∆∞·ªõc 2: K·∫øt n·ªëi Selenium v√†o Chrome v·ª´a kh·ªüi ƒë·ªông ---
    options = Options()
    options.add_experimental_option("debuggerAddress", f"127.0.0.1:{debugging_port}")
    print("üîå ƒêang k·∫øt n·ªëi Selenium v√†o tr√¨nh duy·ªát...")
    driver = webdriver.Chrome(options=options)
    # TƒÉng th·ªùi gian ch·ªù ƒë·ªÉ x·ª≠ l√Ω c√°c ph·∫£n h·ªìi d√†i ho·∫∑c m·∫°ng ch·∫≠m
    wait = WebDriverWait(driver, 120)

    try:
        # 1. Truy c·∫≠p v√†o trang Gemini
        print("üöÄ ƒêang m·ªü Gemini...")
        driver.get("https://gemini.google.com/")

        # 4. Ch·ªù trang ch√≠nh c·ªßa Gemini t·∫£i xong.
        print("‚è≥ ƒêang ch·ªù trang Gemini t·∫£i xong...")
        input_box = wait.until(
            EC.presence_of_element_located((By.CSS_SELECTOR, INPUT_BOX_SELECTOR))
        )
        print("‚úÖ Trang ƒë√£ s·∫µn s√†ng! B·∫Øt ƒë·∫ßu t·ª± ƒë·ªông h√≥a...")

        # ƒê·∫øm s·ªë l∆∞·ª£ng c√¢u tr·∫£ l·ªùi hi·ªán c√≥ tr∆∞·ªõc khi g·ª≠i prompt m·ªõi
        initial_response_count = len(driver.find_elements(By.CSS_SELECTOR, MARKDOWN_RESPONSE_SELECTOR))

        # 5. Nh·∫≠p prompt v√†o √¥ chat
        print(f"üí¨ ƒêang g·ª≠i prompt: '{prompt}'")
        input_box.send_keys(prompt)

        # 4. T√¨m v√† nh·∫•n n√∫t "G·ª≠i"
        # N√∫t g·ª≠i th∆∞·ªùng l√† m·ªôt button ch·ª©a SVG
        submit_button = wait.until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, SEND_BUTTON_SELECTOR))
        )
        submit_button.click()

        # 7. Ch·ªù Gemini tr·∫£ l·ªùi v√† l·∫•y k·∫øt qu·∫£
        print("ü§ñ Gemini ƒëang suy nghƒ©... Vui l√≤ng ch·ªù.")
        
        # Chi·∫øn l∆∞·ª£c ch·ªù ƒë·ª£i ƒë√°ng tin c·∫≠y h∆°n:
        # 1. Ch·ªù cho ƒë·∫øn khi s·ªë l∆∞·ª£ng ph·∫ßn t·ª≠ ch·ª©a c√¢u tr·∫£ l·ªùi tƒÉng l√™n.
        wait.until(
            lambda driver: len(driver.find_elements(By.CSS_SELECTOR, MARKDOWN_RESPONSE_SELECTOR)) > initial_response_count
        )

        # 2. Ch·ªù cho ƒë·∫øn khi n√∫t "Stop generating" bi·∫øn m·∫•t.
        # ƒê√¢y l√† d·∫•u hi·ªáu ch·∫Øc ch·∫Øn nh·∫•t cho th·∫•y Gemini ƒë√£ vi·∫øt xong.
        # Selector n√†y t√¨m m·ªôt th·∫ª <button> c√≥ thu·ªôc t√≠nh aria-label l√† "Stop generating".
        stop_generating_button_selector = 'button[aria-label="Stop generating"]'
        try:
            wait.until(EC.invisibility_of_element_located((By.CSS_SELECTOR, stop_generating_button_selector)))
            print("‚úÖ Gemini ƒë√£ tr·∫£ l·ªùi xong.")
        except TimeoutException:
            print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y n√∫t 'Stop generating' ho·∫∑c ƒë√£ h·∫øt th·ªùi gian ch·ªù. Ti·∫øp t·ª•c l·∫•y k·∫øt qu·∫£.")

        # Th√™m m·ªôt b∆∞·ªõc ch·ªù cu·ªëi c√πng: ƒê·ª£i cho ƒë·∫øn khi ph·∫ßn t·ª≠ markdown cu·ªëi c√πng c√≥ n·ªôi dung.
        # ƒêi·ªÅu n√†y gi·∫£i quy·∫øt tr∆∞·ªùng h·ª£p race condition khi n√∫t stop bi·∫øn m·∫•t nh∆∞ng text ch∆∞a render xong.
        wait.until(
            lambda driver: driver.find_elements(By.CSS_SELECTOR, MARKDOWN_RESPONSE_SELECTOR)[-1].text.strip() != ""
        )
        print("‚úÖ ƒê√£ x√°c nh·∫≠n n·ªôi dung tr·∫£ l·ªùi.")

        # --- DEBUGGING: T·∫°m d·ª´ng script ƒë·ªÉ ki·ªÉm tra ---
        # Thay v√¨ d√πng alert (g√¢y l·ªói), ch√∫ng ta d√πng input() trong terminal.
        # Script s·∫Ω d·ª´ng l·∫°i ·ªü ƒë√¢y cho ƒë·∫øn khi b·∫°n nh·∫•n Enter trong c·ª≠a s·ªï terminal.
        input("‚è∏Ô∏è  Script ƒë√£ t·∫°m d·ª´ng. Vui l√≤ng ki·ªÉm tra m√†n h√¨nh tr√¨nh duy·ªát v√† nh·∫•n Enter trong terminal n√†y ƒë·ªÉ ti·∫øp t·ª•c...")

        # L·∫•y t·∫•t c·∫£ c√°c ph·∫ßn t·ª≠ ch·ª©a c√¢u tr·∫£ l·ªùi v√† ch·ªçn c√°i cu·ªëi c√πng
        response_elements = driver.find_elements(By.CSS_SELECTOR, MARKDOWN_RESPONSE_SELECTOR)
        if not response_elements:
            raise Exception("Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ ch·ª©a c√¢u tr·∫£ l·ªùi.")
            
        latest_response_text = response_elements[-1].text
        
        print("\n--- K·∫æT QU·∫¢ T·ª™ GEMINI ---")
        print(latest_response_text)
        print("-------------------------\n")

        return latest_response_text

    except TimeoutException:
        print("‚ùå ƒê√£ h·∫øt th·ªùi gian ch·ªù. Kh√¥ng th·ªÉ t√¨m th·∫•y ph·∫ßn t·ª≠ tr√™n trang.")
        print("   Vui l√≤ng ki·ªÉm tra l·∫°i k·∫øt n·ªëi m·∫°ng ho·∫∑c giao di·ªán Gemini c√≥ th·ªÉ ƒë√£ thay ƒë·ªïi.")
    except Exception as e:
        print(f"‚ùå ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën: {e}")
    finally:
        # Tr√¨nh duy·ªát s·∫Ω kh√¥ng t·ª± ƒë·ªông ƒë√≥ng ƒë·ªÉ b·∫°n c√≥ th·ªÉ g·ª° l·ªói.
        print("‚úÖ T√°c v·ª• ho√†n t·∫•t. Tr√¨nh duy·ªát v·∫´n m·ªü ƒë·ªÉ ki·ªÉm tra.")


if __name__ == "__main__":
    # B·∫°n c√≥ th·ªÉ thay ƒë·ªïi prompt ·ªü ƒë√¢y
    my_prompt = "H√£y vi·∫øt m·ªôt b√†i th∆° ng·∫Øn v·ªÅ l·∫≠p tr√¨nh b·∫±ng Python."
    automate_gemini(my_prompt)
