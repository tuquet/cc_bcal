#!/usr/bin/env python3
import argparse
import json
import os
import sys
import threading
import time
from http.server import SimpleHTTPRequestHandler, TCPServer
from pathlib import Path
from typing import Any, Dict, Optional

import requests

# --- C·∫•u h√¨nh ---
# Port cho API c·ªßa CapCut. Script g·ªëc d√πng 9001, b·∫°n c√≥ th·ªÉ thay ƒë·ªïi n·∫øu c·∫ßn.
CAPCUT_API_PORT = 9001
CAPCUT_API_BASE_URL = f"http://127.0.0.1:{CAPCUT_API_PORT}"

# Port cho server file c·ª•c b·ªô. Script g·ªëc d√πng 9002.
FILE_SERVER_PORT = 9002
FILE_SERVER_BASE_URL = f"http://127.0.0.1:{FILE_SERVER_PORT}"


class FileServerThread(threading.Thread):
    """Ch·∫°y m·ªôt HTTP server ƒë∆°n gi·∫£n trong m·ªôt thread ri√™ng bi·ªát."""

    def __init__(self, directory: Path, port: int):
        super().__init__()
        self.directory = directory
        self.port = port
        self.server: Optional[TCPServer] = None
        self.daemon = True  # Thread s·∫Ω t·ª± tho√°t khi ch∆∞∆°ng tr√¨nh ch√≠nh k·∫øt th√∫c

    def run(self):
        # Thay ƒë·ªïi th∆∞ m·ª•c l√†m vi·ªác ƒë·ªÉ server ph·ª•c v·ª• ƒë√∫ng file
        os.chdir(self.directory)
        handler = SimpleHTTPRequestHandler
        self.server = TCPServer(("", self.port), handler)
        print(f"üîå Local file server started at {FILE_SERVER_BASE_URL}")
        print(f"   Serving files from: {self.directory.resolve()}")
        self.server.serve_forever()

    def stop(self):
        if self.server:
            self.server.shutdown()
            self.server.server_close()
            print("üîå Local file server stopped.")


def call_api(endpoint: str, payload: Dict[str, Any]) -> Dict[str, Any]:
    """G·ª≠i request ƒë·∫øn CapCut API v√† tr·∫£ v·ªÅ k·∫øt qu·∫£."""
    url = f"{CAPCUT_API_BASE_URL}{endpoint}"
    print(f"üìû Calling API: {endpoint}...")
    try:
        response = requests.post(url, json=payload, timeout=30)
        response.raise_for_status()  # N√©m l·ªói n·∫øu status code l√† 4xx ho·∫∑c 5xx
        result = response.json()
        if result.get("code") != 0:
            raise Exception(f"API Error: {result.get('message', 'Unknown error')}")
        print(f"‚úÖ Success: {endpoint}")
        return result
    except requests.exceptions.RequestException as e:
        raise ConnectionError(f"Failed to connect to CapCut API at {url}. Is CapCut running? Error: {e}") from e


class CapCutGenerator:
    """L·ªõp qu·∫£n l√Ω vi·ªác t·∫°o video CapCut, t∆∞∆°ng ƒë∆∞∆°ng v·ªõi script Node.js."""

    def __init__(self, episode_dir: Path, ratio: str = "9:16"):
        self.episode_dir = episode_dir.resolve()
        self.ratio = ratio
        self.file_server: Optional[FileServerThread] = None
        self.draft_id: Optional[str] = None
        self.script_data: Optional[Dict[str, Any]] = None
        self.total_audio_duration_ms = 0
        self.width = 0
        self.height = 0
        # Server s·∫Ω ph·ª•c v·ª• file t·ª´ th∆∞ m·ª•c g·ªëc c·ªßa d·ª± √°n
        self.base_serve_dir = self.episode_dir.parent.parent

    def _get_http_path(self, file_path: Path) -> str:
        """Chuy·ªÉn ƒë·ªïi ƒë∆∞·ªùng d·∫´n file c·ª•c b·ªô th√†nh URL HTTP."""
        # ƒê·∫£m b·∫£o file_path l√† absolute tr∆∞·ªõc khi t√≠nh relative
        abs_file_path = file_path if file_path.is_absolute() else self.base_serve_dir / file_path
        relative_path = abs_file_path.resolve().relative_to(self.base_serve_dir)
        return f"{FILE_SERVER_BASE_URL}/{relative_path.as_posix()}"

    def init(self):
        """Kh·ªüi t·∫°o v√† ki·ªÉm tra c√°c file c·∫ßn thi·∫øt."""
        if not self.episode_dir.is_dir():
            raise FileNotFoundError(f"‚ùå Th∆∞ m·ª•c episode kh√¥ng t·ªìn t·∫°i: {self.episode_dir}")

        script_json_path = self.episode_dir / "capcut-api.json"
        self.audio_path = self.episode_dir / "audio.mp3"

        if not script_json_path.exists():
            raise FileNotFoundError(f"‚ùå Kh√¥ng t√¨m th·∫•y file capcut-api.json trong: {self.episode_dir}")
        if not self.audio_path.exists():
            raise FileNotFoundError(f"‚ùå Kh√¥ng t√¨m th·∫•y file audio.mp3 trong: {self.episode_dir}")

        with open(script_json_path, 'r', encoding='utf-8') as f:
            self.script_data = json.load(f)

        duration_sec = self.script_data.get("duration", 0)
        self.total_audio_duration_ms = int(duration_sec * 1000)

        dimensions = {
            "9:16": {"width": 1080, "height": 1920},
            "16:9": {"width": 1920, "height": 1080},
        }
        self.width, self.height = dimensions.get(self.ratio, dimensions["16:9"]).values()

    def _run_if_enabled(self, module_name: str, action, *args, **kwargs):
        """Helper ƒë·ªÉ ch·∫°y m·ªôt action n·∫øu module ƒë∆∞·ª£c b·∫≠t."""
        enabled_modules = self.script_data.get("generation_params", {}).get("enabled_modules", [])
        if module_name in enabled_modules:
            print(f"‚úÖ Module '{module_name}' is enabled. Running...")
            action(*args, **kwargs)
        else:
            print(f"‚è© Skipping module '{module_name}': Not found in 'enabled_modules'.")

    def run(self):
        """Ch·∫°y to√†n b·ªô pipeline t·∫°o video."""
        try:
            self.init()
            self.file_server = FileServerThread(self.base_serve_dir, FILE_SERVER_PORT)
            self.file_server.start()
            # ƒê·ª£i server kh·ªüi ƒë·ªông
            time.sleep(1)

            print(f"üé¨ Creating draft with ratio {self.ratio} ({self.width}x{self.height})")

            # --- B∆Ø·ªöC 1: T·∫†O DRAFT ---
            create_draft_response = call_api("/create_draft", {"width": self.width, "height": self.height})
            self.draft_id = create_draft_response.get("output", {}).get("draft_id")
            if not self.draft_id:
                raise ValueError("Kh√¥ng l·∫•y ƒë∆∞·ª£c draft_id t·ª´ API")
            print(f"üéâ Draft ƒë√£ ƒë∆∞·ª£c t·∫°o v·ªõi ID: {self.draft_id}")

            # --- B∆Ø·ªöC 2: TH√äM AUDIO (lu√¥n ch·∫°y) ---
            print("‚úÖ Module 'audio' is enabled. Running...")
            self.add_audio_track()

            # --- B∆Ø·ªöC 3: TH√äM C√ÅC L·ªöP H√åNH ·∫¢NH ---
            self._run_if_enabled("background_layer", self.add_background_layer)
            self._run_if_enabled("scene_images", self.add_image_scenes)

            # --- B∆Ø·ªöC 4: TH√äM LOGO & TEXT ---
            self._run_if_enabled("logo", self.add_logo)
            self._run_if_enabled("text_logo", self.add_text_logo)

            # --- B∆Ø·ªöC 5: TH√äM EFFECTS ---
            self._run_if_enabled("fixed_effects", self.add_fixed_effects)
            self._run_if_enabled("random_effects", self.add_random_effects)

            # --- B∆Ø·ªöC 6: L∆ØU DRAFT ---
            self.save_draft()

            print("\n\n‚ú®‚ú®‚ú® PIPELINE HO√ÄN T·∫§T! ‚ú®‚ú®‚ú®")

        except Exception as e:
            print("\nüí•üí•üí• PIPELINE TH·∫§T B·∫†I! üí•üí•üí•", file=sys.stderr)
            print(f"ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh th·ª±c thi: {e}", file=sys.stderr)
            sys.exit(1)
        finally:
            if self.file_server:
                self.file_server.stop()

    # --- C√°c h√†m th√™m element, t√°i t·∫°o logic t·ª´ capcut-elements.mjs ---

    def add_audio_track(self):
        call_api("/add_audio", {
            "draft_id": self.draft_id,
            "audio_url": self._get_http_path(self.audio_path),
            "start": 0,
        })

    def add_background_layer(self):
        params = self.script_data.get("generation_params", {}).get("background_layer", {})
        scenes = self.script_data.get("scenes", [])
        if not scenes or not scenes[0].get("image"):
            print("‚è© Skipping background layer: No scenes or first scene has no image.")
            return

        background_image_path = Path(scenes[0]["image"])
        call_api("/add_video", {
            "draft_id": self.draft_id,
            "video_url": self._get_http_path(background_image_path),
            "start": 0,
            "end": self.total_audio_duration_ms,
            "track_name": "background_track",
            "relative_index": -1, # ƒê·∫∑t ·ªü l·ªõp d∆∞·ªõi c√πng
            "scale_x": params.get("scale", 2.5),
            "scale_y": params.get("scale", 2.5),
            "background_blur": params.get("blur", 3),
        })

    def add_image_scenes(self):
        params = self.script_data.get("generation_params", {}).get("scene_images", {})
        scenes = self.script_data.get("scenes", [])
        
        # Logic "stretch" th·ªùi gian gi·ªëng h·ªát script Node.js
        valid_scenes = [s for s in scenes if s.get("start") is not None and s.get("end") is not None]
        total_visual_duration_s = sum(s["end"] - s["start"] for s in valid_scenes)
        
        stretch_factor = (self.total_audio_duration_ms / 1000) / total_visual_duration_s if total_visual_duration_s > 0 else 1
        
        current_time_ms = 0
        for i, scene in enumerate(scenes):
            if scene.get("start") is None or scene.get("end") is None or not scene.get("image"):
                print(f"‚ö†Ô∏è Skipping scene {i + 1}: Missing time or image information.")
                continue

            original_duration_s = scene["end"] - scene["start"]
            new_duration_ms = int(original_duration_s * stretch_factor * 1000)

            call_api("/add_image", {
                "draft_id": self.draft_id,
                "image_url": self._get_http_path(Path(scene["image"])),
                "start": current_time_ms,
                "end": current_time_ms + new_duration_ms,
                "track_name": "main_track",
                "relative_index": 9, # ƒê·∫∑t tr√™n l·ªõp background
                "scale_x": params.get("scale", 1.2),
                "scale_y": params.get("scale", 1.2),
            })
            current_time_ms += new_duration_ms

    def add_logo(self):
        params = self.script_data.get("generation_params", {}).get("logo", {})
        logo_path = params.get("path")
        if not logo_path or not Path(logo_path).is_file():
            print(f"‚ö†Ô∏è Logo file not found, skipping: {logo_path}")
            return

        call_api("/add_image", {
            "draft_id": self.draft_id,
            "image_url": self._get_http_path(Path(logo_path)),
            "start": 0,
            "end": self.total_audio_duration_ms,
            "track_name": "logo_track",
            "relative_index": 20, # ƒê·∫∑t ·ªü l·ªõp tr√™n c√πng
            "scale_x": params.get("scale", 0.1),
            "scale_y": params.get("scale", 0.1),
            "transform_x": params.get("transform_x", 0.9),
            "transform_y": params.get("transform_y", -0.5),
        })

    def add_text_logo(self):
        params = self.script_data.get("generation_params", {}).get("text_logo", {})
        if not params.get("text"):
            print("‚è© Skipping text logo: 'text' property is missing.")
            return

        call_api("/add_text", {
            "type": "text",
            "draft_id": self.draft_id,
            "track_name": "text_logo_track",
            "text": params["text"],
            "start": params.get("start", 0),
            "end": params.get("end", self.total_audio_duration_ms),
            "font_size": params.get("font_size", 12),
            "font_color": params.get("font_color", "#FFFFFF"),
            "font_alpha": params.get("font_alpha", 0.6),
            "transform_x": params.get("transform_x", 0),
            "transform_y": params.get("transform_y", 0),
        })

    def add_fixed_effects(self):
        effects = self.script_data.get("generation_params", {}).get("fixed_effects", {}).get("effects", [])
        for effect in effects:
            if not effect.get("effect_type"):
                continue
            call_api("/add_effect", {
                "draft_id": self.draft_id,
                "type": "effect",
                "effect_type": effect["effect_type"],
                "start": 0,
                "end": self.total_audio_duration_ms,
                "track_name": effect.get("track_name", "fixed_effect"),
                "relative_index": 1, # ƒê·∫∑t tr√™n l·ªõp n·ªÅn
                "params": effect.get("params", []),
                "width": self.width,
                "height": self.height,
            })

    def add_random_effects(self):
        # Logic n√†y c·∫ßn ƒë∆∞·ª£c l√†m r√µ h∆°n t·ª´ API c·ªßa CapCut
        # T·∫°m th·ªùi b·ªè qua v√¨ kh√¥ng c√≥ ƒë·ªß th√¥ng tin trong script g·ªëc
        print("‚è© Skipping module 'random_effects': Logic not implemented.")

    def save_draft(self):
        """L∆∞u draft v√†o th∆∞ m·ª•c c·ªßa CapCut."""
        # ƒê∆∞·ªùng d·∫´n n√†y c√≥ th·ªÉ c·∫ßn thay ƒë·ªïi t√πy theo h·ªá ƒëi·ªÅu h√†nh
        draft_folder = Path.home() / "AppData/Local/CapCut/User Data/Projects/com.lveditor.draft"

        save_payload = {
            "draft_id": self.draft_id,
            "draft_folder": str(draft_folder),
        }

        save_response = call_api("/save_draft", save_payload)
        final_draft_path = draft_folder / self.draft_id
        folder_url = final_draft_path.as_uri()
        print(f"‚úÖ Draft ƒë√£ ƒë∆∞·ª£c l∆∞u. M·ªü th∆∞ m·ª•c: {folder_url}")

        draft_url = save_response.get("output", {}).get("draft_url")
        if draft_url:
            print(f"Draft URL (n·∫øu c√≥): {draft_url}")


def main():
    parser = argparse.ArgumentParser(description="Generate a CapCut video draft from an episode directory.")
    parser.add_argument("episode_dir", type=Path, help="Path to the episode directory (e.g., 'projects/11.la-rung-vo-thuong').")
    parser.add_argument("--ratio", type=str, default="9:16", choices=["9:16", "16:9"], help="Video aspect ratio (default: 9:16).")

    args = parser.parse_args()

    if not args.episode_dir:
        parser.error("‚ùå Vui l√≤ng cung c·∫•p ƒë∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c episode.")

    generator = CapCutGenerator(args.episode_dir, args.ratio)
    generator.run()


if __name__ == "__main__":
    main()

"""
-------------------------------------------------------------------------------
H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG
-------------------------------------------------------------------------------

Script n√†y ƒë∆∞·ª£c d√πng ƒë·ªÉ t·∫°o video nh√°p trong CapCut t·ª´ d·ªØ li·ªáu c·ªßa m·ªôt episode.

C√ÅCH CH·∫†Y:
M·ªü terminal (PowerShell, Command Prompt, v.v.) trong th∆∞ m·ª•c g·ªëc c·ªßa d·ª± √°n v√†
th·ª±c thi l·ªánh sau:

1. Ch·∫°y cho m·ªôt episode c·ª• th·ªÉ (t·ªâ l·ªá 9:16 m·∫∑c ƒë·ªãnh):
   python scripts/render_video.py projects/11.la-rung-vo-thuong

2. Ch·∫°y v·ªõi t·ªâ l·ªá kh√°c (16:9):
   python scripts/render_video.py projects/11.la-rung-vo-thuong --ratio 16:9
"""